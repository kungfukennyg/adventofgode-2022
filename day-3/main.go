package main

import (
	"fmt"
	"strings"
)

const testInput string = "vJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw"
const testInputPt2 string = "vJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw"
const pt1Input string = "dtddvvhwttHJhwdhJPddhwJGppmGjgpQgTjQplQpTljwpg\nBfzSzRSVVMVNRMDDNBSNSnfBmbrglGQbmNpQggFjpgpbQlQb\nZSBffLnVZdCCPJjhhL\nRGCZpWWWFlHQQbgvFssg\njLnMzjnrnjjNjhrjdwbHscsVVgDVQPvPwh\nnfJnLMLzjJMtnjNnnBbZtBWBqqbTTTBRpT\nnddlhBtqTBqTVSlBtmCmVcRVmZggfWbcZc\njDjvPrPSNPwrDNRWbbgWCjRRCcWm\nDzDwSpFrvrvFPQLzQnsqztBthTJnGJqlsJ\ngssGmzwgRgsNmTsqgDnDJnbDHHhhzFdDDh\nWQVFjMWrVQrVvVVjVctSSLSMZhnJZPBnbdnhbnHZZBDJBh\nVCtcccVQLrfvrSlGmfTfNgfmlFgm\nDsmfsBbNNZhDWsbmWmNbbPDHLFjcctjjGcnZGzncnctcGH\nSwVQJrjVwpgSVRpjpVRrlTMCFFCLCFFcHzzGMcHrtHHH\nppVwTwSwpwvSlSlJTjVVbPhsvvBssWsNfsqWPvWs\nBJwqwJtqqDDDrGDnPFzPFfpphD\nTgZscCHQLSHgZcfMzpjFFjzsshfj\nLcNlTVQCCVLLZTLNvpRtpvBBvRJmNB\nbDBGQBBCTTNPGPPwPzcHfVHrDtLWLVrWVjjHWr\ngpssqqsqlMFfLZQWftjVpr\nlvqqFMRlFcQvbzCNCG\nfhhMDdPhWMJMWvhhSfwRSGlzFbSFNlzw\nLcqTCqcgZqjTggVjcwbFRwbDBTzbRGRwTS\ncHLpZgnCHpQsDdsmQp\njwStJjJhtgJStpgwJMggQWqQTNTfNTWfbNNMCCNG\nzRZnFPRZPVncPGVFRlRmGHCTqfCCPCHHfLfbTQCbTq\nlnVmFZRZDnRVBFZcrZlhjpggvppthGhphpwprS\nlcttSptHHllQbMcsrltSQGpvNBzpgWBBBDDGWzvgLz\nPdjPVRFhFqFjRRCjzvRWnWLBLgbBBLzg\nhhCCFbPTmjPdhZjhPhZCmTjjMsrJSfHrcmHJrHHmlcJSsmft\nWhWnLZSSnSzQQhfLLNSfmDHrCFDDHtpjGGtTGQCG\ngJbJBcMVwJlRRdbwvwJBVtjdtHHTmptpHTCtTFrFCp\nJwwgvRMJlvJwgqgvqRMcnWWhLPzzsqfnZWnfWWnj\nzdwTSvzHMvVSzDCtZhtGmbTGhm\nlcBHfFjjgtsmDCgshD\ncJPBnqNFnLfHJFPqljclqJzQvSSVWvSnMwvSzSWWdMWM\npNJMcZrsZDLDcbcccMpQffHqvgdwdFFmdmqwvqmgmzsw\nhhnWjTTStRCGSMgvvgvdqvdFjvVz\nhCTSWhPGttTCGBWMRlTCMSnPBDJpbDfDpNpbbNJfJDJbpJpN\nlbcQcSNFchhQNqHLLqhLqrMpqM\nWfsnsszPWfBBVpHdprrpdnGL\nWTzWfwjtTBzwwBDzmfSSQmmbFZcpQNcbZZbv\nPwSJSlmtPPgwgmHhPPvRvGHLRLQRBQGCQVGb\nrnsFDnnfGGRWQRnW\ndfTTfTFdfrfFFFzQFPJPSSlhqtllNPzgwS\nMMbTFZrcrGZMDqNStWScDtzS\ndvWmhQggQvCnfnqPqDnDjnfP\nlgvdvLClWCQlgdhlrMBBHpGlwbHHGH\nCQHgQpPdCQpsCpzRwSVRSzRZwZ\nJbNBbcbrJvbJnqVznwwTzrzz\nwNbfLvvfDNNBHPFLhddFsQss\nVVzqvwzpqvzqNVVHGNqjHpNfSQDWdWwJdPWrWccdQrWrrDdd\nnLcbtBRtBhcnWSJQlJSgll\ntFbLLLRRhMtsBMtRCRsLCMBVjjvHTNjHHjzcvFFppGHzTT\nQCPrPWNPlWjGGZqGmvdPGd\nJgpHpSfphhfpVmBSgnTvdtddGvZVdvddDv\nLhphBfHpSwSwfHcMgfpmBWWWbsNCjFWsljNbbjlLjb\nQJmQbRmdfmdSQRQZSJltTltNvTrtDtrlftDD\nwpZcHVwwMgBpWMVgWpHLphztDvvGvDPlnGvDLlNrDPnNPl\nMcgWFWHHHzVpMgZQFqbjsdjqqRCq\nJPhLFfMJDLQnjNCvWWpdjjdM\ncrSwnwVnwSRBcNBNjjWCdC\nGlbTGbsSzrtbmbfhnJQP\nfDLSWVDRHHfVWHgPcZlDlZbbQhBcZQbb\njrmFmprTpFztmddjdjrpvBQlQZGhQbTsQbGcQbcbQs\nnvqdpmjFnwpLSWlfnVNnWl\nnZBRbBJzznNNCnJZwnBSCJMcpcTpcwhcqhmsmWMwFWLL\njQfvjgtfvPlHHqWpvWThpWqWch\nVljjjgjQjrTDlDgrHtVCbnJZzNzNbnRNNJZrJR\nMQtJnttlMLlJQsNhQrVVrFVWRRbbVFdJDD\nvGjvzmjzgHqSjjSzmSGHTWbfDFWrbFzFfdDVrfRWDb\nqPRqvTSPggqGgHCmllnCNLtnhcnnsnnw\nzrlZsQMFrsgQFMMjMCbjVDCTCW\nNqHNRdBppcJJcTpdmRfHThpdDWDtvbWVtbLjWbttWqqCCbLt\nmhJpJHTJmBhcJhwhgwzsQwSSlzQQzGlZ\nTvsszlvnzRRVTqzVrqrjjZGPfQPFqPqG\nmcNhDNchppWmWSNhdSmSCQNjPFjrfGjrgPFCrgFPgPgrLf\nSDddWpdMWSwNDmMNwlJRQwJlsVRRvzlsHt\nDTtggjsFFFTlPJhvctBqBqSRmSMBSRnmnRcm\nfGfwZdrbHVLdbGdHHwwQGVwBBCMMfvCNRNSMMMSRBmmRCN\ndGZzGHGVVbvHvHwbzpGbHLrwFDDFTtsglhFspgJshslTDJjT\nCbzspssWwCPcvvplrfqfDCJrDqdllB\nLjttnjNTNGgQQJdBrffTwB\nnVtLSgggjFwtMczhvzpZbSZW\nHCzCHHvWthWFHhssWCVmnqZrnqVrmrmgnbrqmN\nwPPGBjQQGwGbSlSLwgnpnrBZnBBmnMNnMN\njTTbJlJjPPLPGHHTthhhHcFWTT\nqRdvvPDrCpzPHzcdrrcRqtbJJgjhgtWjJgbWJtgCFb\nGTwGwNscLllGTZmGSTZGlSBMnhggjbgtgbtbsgWFFMhbMF\nZSQBSmlmzcrdQRqz\ncSpTRphwwghRfgSScqPpnDqDCjDjJJJJDvDLCvvn\nBVmmQFQBQVNBVmsWlbQFGBBlCHTJznzHLHvvCnjjNLHJDLHD\nMFsZZMbBGblbQTmQsFsQMMfPcPcwSpwtStgPphZtctPc\nQZbbZBdjPBjbQQbZnSSltlfwWvlvwNtNjwFMMN\nDLVqTJqpSVtfsptwfWpv\nrcRRVVTSbPQBPrBZ\ntjSgSjLFSnVjDWRsQj\nlcdqhfFpqZGpZqznrVRWPrnWRVBsVG\nFHddNNNHwTHMHvvS\nqCSDSQlwBHNbgJrHnLJH\nGRpRpRfnmRWWVWgVrF\njhdZjpnvGfTZZQPlCtqQQSsS\nFMZSGWWBrZjMBZMrBWMGjjZDnCRqpgPnbRwPbFnvvqFnDR\nQHcpfVVslfdVlQclcctqRgqgbsCwbCwPCCCPwD\nNLHfLhclmmhdfNNpfQMBmZWBrJMmZWBzMrjj\npBMpRgBMQwzRthmzLC\nHPcJvrvDbjvrFDcvWrHfHfWHmdddtdTLztmtdtfllmNdNhNz\nDvPFDvnPJLngQsggMGGQ\nBbcFHvbhhDbbTSvZmwwgJPPlDlZldd\nprCrNLMNgWWJBdrJ\nfQMLCfLLtpqsNNMnnfBhcBSVGbhhhcqVbcjc\nZchcZZjmmNpgmJtgmM\nRLrHllWrQZQGlBpbGFGFFM\nRQnLHrqPLnZHzqjfVPcvVTfCvPTC\nfMtwjfMwrbjfGrtrpPGrwpNNVNVqcbdVqHZTFNbcHSNL\nmgzvDnJmnJhFJHSTNqZLHncHLS\nvRzhzslJFhRffPPQMjGtGl\nVMMNjWppQVwzNWrZdrrtMCMZCtMT\nngDScLcvPPgDPDGhGDPGSHVbHTHmZtTSrBHZbZBmBb\nLhlglLghnVlplswJjs\nbGJQZZTQQLJJbQZlTZLjCGQTsDhWFhmshhvjWVFVVrgtDsst\nNScqwHcwwnnzBwqPqqsmVNhgsDDVtsghrFFg\npcrcwnpcffrcBzfbCRLpRLMMRlRLQl\nhzCzCzpRgCzzzCctNsNWNqsZqZhPqNPb\nTdBwmdrrrDmvwTvqNsSRssPlsWsq\nFDBRRHDMTmBfmrmngnpjGgVptMgLCp\nZPLLnSPMFGvFZMSvHhDhqHfqvfqbDW\nGgcppCgBcrQBBgplrVddhDqqqfdHgWdfqb\nCcCjQszmGBQjrcCwCmCccPwPTPnMPTnMJSMMRZSPJL\nLcVVcqqSHRLzRnCfNnGzNW\nLZPPdljlCggMjgNM\nPTvwlPtwtlJvZTQvbcHppFLHVVTcFssF\nfpWzvzNgWJBVfBJzWzBVJNzWbZcbHhlbthjlrrPrjZZPHZhJ\nhRDmGCFDwQnStncrjnccHcMP\nGmmsGRmFTsFwSCsRQDsCSqqpfvfgzddWggvqdpfBWzVh\nwjRBFljJGDFwwlGGpBSjGDtwTVtTgHHHsHHsVTVzsHqq\nCPLNPdbWvbMWbcmvPNdLVqtsHqgCqHChZhhsVsHt\nPWcPfPvmvNQbbWdWpJjJBDptGnDFjftn\nmFFmJpDMmmnJFjWDVclsSpcflSsQwSsc\nHrjNNjHNfVwLNSSl\ntdZbhjHZHPbdCTvbbhhrGbbHMFmRMvnRRFmmvJMDmgJDJMnq\nszJZhshbsfZJjbttchPctdTnWnRWVWMMnBdLRpMnBz\nSrNwvDSwrCmnVRvjpWLBBn\nggGmgNFrgSDwmNgrCmtPsZPsjQGsqPcsqqJP\ngjSWSjJSWrWzppzW\nMCMzHNGNqHfscsFtrtwscVcr\nqGHNGNHLCnLmTCHfMMmNTzzldzgJlJZZgJljgTdD\nQGTQtQzTmdTsGTLcdFTGzdtBBjtwvBBJDvDMHJgjJvww\nlPlqsZWnDJjZvZgV\nShCfCRnWGFsRRRrF\nlwGtndCrrmGCwdmhzQrBzrHvLVggPgHv\nfjMjDZJqSDJfJqDNDjJffjZLHPHHFvVFzHBLgLFpFpBSgL\nMsTZWRNZfJZZqMGVGhhlhhccRnhC\nMMvncqvcHcSnsdzzgvdfQjpljpQVTdDQDRTRlVpQ\nwLCrNtBFFHHThRlH\nbPJtHmCWssqgGPvq\nLvTLsmDWvTWqTsmqjRTmjwgdwgnMHMMFgdtHmBmFVn\nrlSCJzCSfpGGlhznQdnwFhtHgBFwtV\nSGZJJSSrVfCbGJLjPsWbvjRsPTqR\npNqVVDCMVMBpqJVdMNHrccGHrtNtTFFFrQ\nhwmllWbvvbnPvbSvtrFhhJzzHztcTztT\nWSnbnPbbbvlWlRvnsqqMgLRMjLgVLCJdRV\nGphVTGVMtQwtJmtCJP\nFRRsBBsFqRNZNNrgqBdRfCZvbmPgmQzJQPnmJbJmQPJPPmwj\nRNqsFrRfZZsZWvNqWRFvrBZvWhhCGVplhlWTlTpSCLpMhWMD\nRZRjgbZHjjhsSnRsZstDRStsTVpFhBqFphMqPPpTFQVMPFTM\nzrcGJwNNdwJrfNdJWvGdJzdTlTFlqTVPFTVFPPBpqNTbBP\nWwLdLGfrRLStCZbD\nmrmTqJWTvDDppTDb\nDGzBfCzNDzdMwnLlbn\nFVZPFZFFZPgjmWZsDtsq\nTpnFTnFRCgRgldMRnDnRcrcdbdPBHbtPqbVcccrH\nWNWLfQQmfhhSNwmrcbSVqPtbZDZcPb\nLQhwLQvQvNfJhJRDMGFRlCMDMD\nvLFTDmjVvLgnNHPphN\nlMClGCmsRdCnPzCccngCpz\ndlGZwRsRrRwswGsdSbbZSbVDrVBmDWWWFJrTrFvFTmqV\nSGsZRqGLWLLtZRHRRcLHGTlJjzgJpjzTpNTNJNWpTm\nMPMPvFFvFBrPPDPMQMPChjgpNpSNTmmmpNlTDljlTz\nvnhrvMvnhSRqqLqnfn\nmGFrlBmFQNQFljhqqqqbmHMsTPRbWWCsLMWRsb\nwnwtvpwVzDVpvzzwZppnctMLtMPWWCstTsWTsTLffRRW\nvwDJgZnvZJFqgLBFGqgl\nQdGltnWNWqTdqQWvWsMJcrTcFcrgshJRMs\nBzPLCDPzzzzCCLLfCBzfSDmLMrDJMglrcRbbhRsFhMrRJcsM\nfjSzwwHfSzPzfCVBHlpdjGnZqnZptqQWjGvG\nVbJZbgVzvzmhQpQWpQzhDp\ntHPPcGcFBlCctCGtGcBBNlDLMGfMLwWfwwqMLLJwQWwp\ndCHTPTPJdTBFPdrZjgsjrjnmdgms\nJJpBvJQBZVvcFqqnsWdWvjsn\nDCfbDbTtbgfCSHqqNdFMPhPDFnPPDWsPjM\nbTmzTNCTNmfqTgJQcpLrpZLzVlVL\ndtTLntTjzTftnmwnqGGQHNmm\nSWbShCPMBgBRRFSFtRZZmm\nDlJPCJCgPWhttzpvdjcpVl\nWdzsNvWMzNsMHWddWCVffqmSmScLPvLPgLgLPplrrPmL\nBtnzbnBhbwttwtZlmmlgcwSrLgmmpm\nbFhQtbGBTnjBBbjTtFBbVDzddDDfjdDDqNWVjWHj\nppmtpgLLZLCbMQvQQThdtrvPhV\nBBlHBwHRjHqBzzbHHqjjQdDQTDhPQDvnQlrQDQvr\nHGjFzwHNczbzRFcGzHGFSJSpspsmpssMLLSZCppmfs\nMpGrMMMcTsHMVHcvbwwmmcRSmDmDmv\nzCNptqCBQQLCNLCzbfvSvbSzSDRDSmSv\nCNNqNgNQJNgQtCqLlllZdZhTrThsnHpVVssPTsGP\njhSGcShDrLcLLFcw\nMVzQvQNZVLHvHPdhLW\nqzhhQlVbgqjmSjJDsgmR\nCFzSPCgcsVVzFgzSCsBJwjdwJtNllnwglJlp\nQrvbqWvvLbmvDMMmbdwFWpNNwwwwptjJWn\nRZRZZqvvvDbDHCRTGchHFSGG\nSszgPSPPVltDlqtz\nWfTdTBdQdFnWBBBhBhNjVJtpNsVlDDDHHJWp\nhQhrLFsBwdQPggbRgPwRMg\nfrRppMMDMpDnJfprnZhrrhpzWgvvGCvvFzWFvzvVVWFGJB\nTcmLwTsccqwqbPwsdwqdTPSvBvzzztvggVvQCGWQCLBvCv\nsswNjscwmqjwSssjdZNMfHHlHhfrnrgnfR\nJpBJBdmdzZzzpngmbCnlqnNbNM\nMMTHGccLTLvwRMlRnnQnbblnRnSs\nvVGtvMcjLVGHfHDrPPWZppBpJpfZZZ\nFGJtlttPdPtGFldlPRGpJTVzSBSSggHgJjVmBMHjJm\nrhbvqrQLrWqrWLLfqbjjgNmVNSgzTmNgNS\nhsffZQqnqCfZzlPPGlRlcwDs\nHDDdZpcFwHFRFcZqDctpRDHpwTCVwjrBTQTBLBLBJJBjjQTJ\nldlMzhlPshPbLrrVrQQCMQjB\nglzNfWlvbHqSdNNNcF\njZCMtnZZHCZwBWMwCwtMmfPFfvHDvzHFLPmFDfvh\nRcrQdRRdGTzGvDGmfgjh\nTsQscdQsQNTNqQQpRrRVCCBMMJJWMMVNVjnNJM\nzVPWhVzLzWBWHZnlqBllqlpRbGNdffscGNdbDRnNSfcG\nMtvSFQQwMcpsGRNGFR\nvvTwJJSgmCSMmjVPPJWWhzllWLVV\nRjdfnJfmbVvVJVFQcs\nrZDZGBBZVvLZLHFW\nqPzTDPlVrjNgfCdmPd\nbcjmQPrnbmVmsLVrLrjmcHGRWlZHHRwHpZRHWWwH\nnFhqzFqJzDJfvfSFqFfGHWZZHGRJRWHZWdpWwZ\nhBCtDSSFCTqCCFzSnzMrLNmrMNPTNMQPMmNL\nqvNBSJVDJGGVSJbVDDVhDbbqPjpWpWzWrnpWvvWPMjnWnpWz\nmlTltwcwMWTPfNTN\nCtCwFmCgmcmlRFmFCtRCHgmDJsbBhVqsbBHVDbNHDHJqqb\ncsBFBsLrBGBWcgLcBvRgpRhbwRwlbQwbwQgD\nDCqmDmtTRtRlhdlh\nqnCmTNPmmCnSSzmzNzGLzLccGDBzGrBLvvcW\nFjfBjHnHzPFwhvFFqh\nbjRpGsNsPqQvPclb\nNWGGWGrrZVZjsCLmDMMgzgrSnzSm\nMDgmmsNCmZMWmHCZLrvnLBBjPLVlPVbW\nzcJGQwJdFRnrBVzqzvPr\nhTQwhJwcfTFddFdGSfcRQQGFsggsgsHHnSmgsgsmgCnHNZpC\nBPfwzfsgsvfszvBRbQpttRVpJbJpVg\nLhTmHLbmbcFTFrWCbFqhFHLHVRpVtQpZVVDVprnDMJtJQnVZ\nTGWWbTFFGTqlHhqhSdNdNfNSldjjBfjv\nzCzpWTccHlWcPzMljMttbJfjmlfm\nDqqQVZZqVsqJnbbnmjbJJQ\nZRmDZsSgVmGLsVqsLDFvrcccHrcTWCgWHBCHcCWp\ncvGlQMtQlPtQWWMlcGsrFwFdbgdbdGGDCDCwdd\nVChVZNBVjTTfhNTFgzrzrJgSdzgzwf\nTHThZTqZRHZRqNVZNTVLjRCMmQsntQctMnsPmMmMcWtLMQ\npNRHrbNlNnRLNpMMMTrcGcGTcccz\nZttBmsJmZdjsvTTvvdBMjDhfMGWGDfDfcScjfD\nCmtTtwvtCsgllNHPPFbLpC\nNpQcvwwRHvdfRvQsNfBQNvfRhVmVMqsZMmMshjMMtWZtMmrm\nCGHbSSzFLSSHzTnbLnCWMrtWMtjnZMhZrqZtqW\nFzCPPzLbPgFJbHSPldNRpgNfvvccgvwf\nnSjpnnhNchMQZMSScnshshncJCGwHGClwmHPZlJPTVZCwHJf\nLvtzBTgLWgLPlPwHPLPJ\ndTBDqRqFzzhQFhshhNhM\nHjjdPsjnllHsbnnDnbTBzLBFBZLLpRFRcCHRFz\nwqqWwQhQQMCQffqqhtwMGhpZFRRZvzWzFvBvpvmcRvZm\nfGfghtNhthqJrQqMqMMSgDdbPjbssDbdSnjCdd\ncqPwJJnnffBFqSfJFnDDPVplLdglGgLVjzGLdVSzVt\nWHRTWNHsQTNbzsbCbTsvWrWtjlgVdLgLdvdgvmLjpGlgtm\nZMQrTbNHZNsHHrQCZrNDFzhwnMJcfnDhJPPPFh\nLRCFbjNjbCZDmtmqmRRmLtFJBgWBBpvJMwBJvGjBBvMBgw\nTTrlfHzccVllZhdQgdGMJWvgWgBndwpG\nfVSshSVlsfslhsSHHSZtZZNmNFmtmbFCDF\nSPGCBPDMtbcbCtchSMccDTTrrrTFTrsrMTWHTHFVWF\nJmnzqVmmwwfpJpmdHRTRsdsTrFdrQp\nLqwLgzJgnjqLwgGcVbtjDGjcVbhv\nPQcMvrvMsvmdSPPVccmSJcSpGBWWWbBHfWWnfttJWnWJpJ\nwDzqhjzmqRzDRwqDzNDbWtjWBBBtGbtHpHnnBf\nzglRhDqqDZgRNmZQVCdcCPQvvdZv\nRpVjRgvFjGBNWtBWFDtt\ndcqQwlqMMsCLLfbgQmtD\nsnlgzsggTzSTSJTr\ndLHhDdtlMngFcFsFLFzzsj\nvWRGGRVrrWvvGQQJBRsmQzmsqnffqcNfNcfz\nvSRVJBVBwTvWTnHphTgDgtMpDl\nbvvGnnJbfPmfdgJJSVtwwCpTScVfNpSC\nsjsZWDqBqqMRZsDjbWMVwtwNNcNtScRHpRRttp\nhzhDqqWDzZzDZzZLQPJPdPnPvlrbGdlnFQ\nPwWHTwzFvNHsNzmmMwzNWGQrCqCFjpZbpnGqrqnpbr\ngRVRgJRJlDLSJddDccQVrtZnCqjndnrZdnqnqpdq\nchhgSSJfQhRRcSSSSBLVfzmzHTNzMNsTNWHMMvMP\nlftqSpBSvhlDBDlhBSczQGmcFMcMVVFMmGFWsm\nrHLHTNdggsLLnwLHbTTgdrTMPPmMGWZGQQMzQVQFZQGM\ngbJnrHHjnbrgLrRrHpBJvSBDDsfJsDtstq\ndBTtFLTtVmpdLhMprSRSWMRSMR\nQvJvQbjbCgCQRBhzzRsNWNBC\nbjgGqQGbQnjGQgnQgbGgjJnDLHLdfPVtdDmLZdBFVVZttdTf"

func main() {
	// doWerk(testInput)
	// fmt.Println()

	// doWerk(pt1Input)
	doWerkPt2(pt1Input)
}

func doWerk(input string) {
	var total int
	for _, line := range strings.Split(input, "\n") {
		front, back := splitStringEqualParts(line)
		fmt.Println(front + ", " + back)
		fmt.Println(fmt.Sprintf("%d, %d", len(front), len(back)))
		for _, item := range front {
			if strings.Index(back, string(item)) == -1 {
				continue
			}
			priority := getPriority(item)
			total += int(priority)
			break
		}
	}
	fmt.Printf("got total %d\n", total)
}

func doWerkPt2(input string) {
	groups := [][]string{}
	inner := []string{}
	for _, line := range strings.Split(input, "\n") {
		inner = append(inner, line)
		if len(inner) == 3 {
			groups = append(groups, inner)
			inner = []string{}
			fmt.Printf("reset, groups now at %d\n", len(groups))
		}
		fmt.Printf("appending line %s\n", line)
	}

	var total int
	for _, group := range groups {
		fmt.Printf("processing group %s\n", group)
		priority := getPriority(findMatchingRune(group))
		total += int(priority)
	}
	fmt.Printf("got total %d\n", total)
}

func findMatchingRune(group []string) rune {
	occurences := []map[rune]int{}
	for _, line := range group {
		occurences = append(occurences, countOccurences(line))
	}

	for a := range occurences[0] {
		_, ok := occurences[1][a]
		if !ok {
			continue
		}
		_, ok = occurences[2][a]
		if !ok {
			continue
		}

		return a
	}

	panic("help")
}

func countOccurences(line string) map[rune]int {
	ret := map[rune]int{}
	for _, l := range line {
		c, ok := ret[l]
		if !ok {
			ret[l] = 1
		}
		ret[l] = c + 1
	}
	return ret
}

func splitStringEqualParts(line string) (string, string) {
	half := len(line) / 2
	return line[:half], line[half:]
}

type priority int

const priorities string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

func getPriority(in rune) priority {
	idx := strings.Index(priorities, string(in)) + 1
	if idx == -1 {
		panic("unrecognized rune " + string(in))
	}
	return priority(idx)
}
